//DSPSV computes the solution to a real system of linear equations
//   A * X = B,
//where A is an N-by-N symmetric matrix stored in packed format and Xand B are N-by-NRHS matrices.
//where U (or L) is a product of permutation and unit upper (lower) triangular matrices, D is symmetric and block diagonal with 1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then used to solve the system of equations A * X = B.


namespace dspsv_func{

const int PRINT_DEBUG_STUFF = 0;

/*
	A:		DOUBLE PRECISION array, dimension (LDA,N)
	B:		DOUBLE PRECISION array, dimension (LDB,NRHS)
	UPLO:	CHARACTER
         	'U':  Upper triangle of A is stored
          	'L':  Lower triangle of A is stored.
*/

function dspsv_exec(var A,var b,int uplo)
{

	var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack. Search for the correct paths");
        
	int m,n,nrhs,ldb,info;
	m=A.rows;
	n=A.cols;
	
	nrhs=b.cols;
	int ipiv[n];
	int j;
	for(j=0;j<n;++j)
		ipiv[j]=0;
	ldb=max(1,n);
	var	AP=create_ap(A,uplo);

	var dspsv = dlfunc(lapack, "dspsv_", "vpppppppp");
        if(dspsv == null || !dspsv)
                die("Not DSPSV");
	
	dspsv(uplo,n,nrhs,AP,ipiv,b,ldb,info);
	
	if(info==0)
		return AP;
}

function create_ap(var A,int uplo)
{
	int m,n;
	m=A.rows;
        n=A.cols;
	var pla = loadlib("linalg_group");
	int ap_size;
    ap_size=int((n*(n+1))/2);
	var ap=new 'NumMatrix2D';
	ap.resize(1,ap_size);
	int i,j;
	if(uplo == 85)
	{
		int k=0;
		for(i=0;i<m;++i)
			for(j=i;j<n;++j)
			{
				ap[k] = A[i,j];
				++k;
			}
	}
	else if(uplo == 76)
	{
		int k=0;
		for(i=0;i<m;++i)
			for(j=0;j<=i;++j)
				ap[k] = A[i,j];
				++k;
	}
	else
	{
		die("invalid input");
	}
	return ap;
}

function max(var a,var b)
{
        return a>b?a:b;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

