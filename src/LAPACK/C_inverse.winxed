//ZGETRI computes the inverse of a matrix using the LU factorization computed by ZGETRF.
//This method inverts U and then computes inv(A) by solving the system inv(A)*L = inv(U) for inv(A).


$load "C_Double.pbc";

namespace zgetri_func{

const int PRINT_DEBUG_STUFF = 0;

// A is COMPLEX*16 array, dimension (LDA,N)

function zgetri_exec(var a)
{
        var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack");

	int n,m,ipiv_size;
	m=a.rows;
        n=a.cols;
        ipiv_size=min(m,n);
        int ipiv[n];
        int i;
        for(i=0;i<n;i++)
                ipiv[i]=0;

        say("Given Matrix:");
	    say(a);
	
/*
  A is COMPLEX*16 array, dimension (LDA,N)
          On entry, the factors L and U from the factorization
          A = P*L*U as computed by ZGETRF.
          On exit, if INFO = 0, the inverse of the original matrix A.
*/

	var zgetri = dlfunc(lapack, "zgetri_", "vppppppp");
        if(zgetri == null || !zgetri)
                die("Not ZGETRI");

	int lda,lwork,info;
	lda=max(1,m);
	lda=max(lda,n);
	lwork=max(1,n);

	

	int work[lwork];
	for(i=0;i<n;++i)
		work[i]=0;

//calling the function
	zgetri(n,a,lda,ipiv,work,lwork,info);

	return info;
/*
INFO is INTEGER
          = 0:  successful exit
          < 0:  if INFO = -i, the i-th argument had an illegal value
          > 0:  if INFO = i, U(i,i) is exactly zero; the matrix is
                singular and its inverse could not be computed.

*/

}


function max(var a,var b)
{
        return a>b?a:b;
}

function min(var a,var b)
{
        return a<b?a:b;
}


function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

