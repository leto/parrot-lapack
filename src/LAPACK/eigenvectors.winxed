// DGEEV computes for an N-by-N real nonsymmetric matrix A, the eigenvalues and, optionally, the left and/or right eigenvectors.
// The computed eigenvectors are normalized to have Euclidean norm equal to 1 and largest component real
// This library is spefically fo calculating eigenvectors the left and/or right .

namespace dgeev_func_eve{

const int PRINT_DEBUG_STUFF = 0;

/*
	A:		DOUBLE PRECISION array, dimension (LDA,N)
	WR:		DOUBLE PRECISION array, dimension (N)
	WI:		DOUBLE PRECISION array, dimension (N)
	VL: 	DOUBLE PRECISION array, dimension (LDVL,N)
	VR:		DOUBLE PRECISION array, dimension (LDVR,N)

*/

function dgeev_exec_eve(var A,var WR,var WI,var VL,var VR)
{
        var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack. Search for the correct paths");

	int jobvl;
	int jobvr;
/*
	JOBVL: CHARACTER
	JOBVR: CHARACTER
          = 'N': left eigenvectors of A are not computed;
          = 'V': left eigenvectors of A are computed.
*/

	int m,n,lda,ldvl,ldvr,lwork,info;

	var dgeev = dlfunc(lapack, "dgeev_", "vpppppppppppppp");
        if(dgeev == null || !dgeev)
                die("Not DGEEV");

	var WORK=new 'NumMatrix2D';
	jobvl=jobvr= ord('V', 0);

	m=A.rows;
    n=A.cols;

		lda=max(1,n);
		WR.resize(n,n);
	    WI.resize(n,n);
		ldvl=ldvr=max(1,n);
		VL.resize(ldvl,n);
		VR.resize(ldvr,n);
		lwork=max(1,n*4);
		WORK.resize(lwork,lwork);


	dgeev(jobvl,jobvr,n,A,lda,WR,WI,VL,ldvl,VR,ldvr,WORK,lwork,info);	

/*
 INFO is INTEGER
          = 0:  successful exit
          < 0:  if INFO = -i, the i-th argument had an illegal value.
          > 0:  if INFO = i, the QR algorithm failed to compute all the
                eigenvalues, and no eigenvectors have been computed;
                elements i+1:N of WR and WI contain eigenvalues which
                have converged.
 */	

	return info;
}


//computes the max value

function max(var a,var b)
{
        return a>b?a:b;
}

}

