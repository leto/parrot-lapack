/*
ZGESVD computes the singular value decomposition (SVD) of a complex M-by-N matrix A, optionally computing the left and/or right singular vectors. The SVD is written
      A = U * SIGMA * conjugate-transpose(V)

 where SIGMA is an M-by-N matrix which is zero except for its min(m,n) diagonal elements, U is an M-by-M unitary matrix, and V is an N-by-N unitary matrix.  The diagonal elements of SIGMA are the singular values of A; they are real and non-negative, and are returned in descending order.  The first min(m,n) columns of U and V are the left and right singular vectors of A.

 Note that the routine returns V**H, not V.
*/

namespace zgesvd_func{

const int PRINT_DEBUG_STUFF = 0;

/*
A :	 	 COMPLEX*16 array, dimension (LDA,N)
JOBU :	 CHARACTER
JOBVT:	 CHARACTER
          Specifies options for computing all or part of the matrix U:
          = 'A':  all M columns of U are returned in array U:
          = 'S':  the first min(m,n) columns of U (the left singular
                  vectors) are returned in the array U;
          = 'O':  the first min(m,n) columns of U (the left singular
                  vectors) are overwritten on the array A;
          = 'N':  no columns of U (no left singular vectors) are
                  computed.
 S :	 DOUBLE PRECISION array, dimension (min(M,N))
 U :	 COMPLEX*16 array, dimension (LDU,UCOL)
 VT :	 COMPLEX*16 array, dimension (LDVT,N)
*/

function zgesvd_exec(var A,int jobu,int jobvt,var S,var U,var VT)
{


	var pla = loadlib("linalg_group");
	var lapack = loadlib('liblapack.so');
    if (lapack == null || !lapack)
       	die("Cannot find liblapack. Search for the correct paths");

	say("Given Matrix:");
    	say(A);

/*
 A is COMPLEX*16 array, dimension (LDA,N)
          On entry, the M-by-N matrix A.
          On exit,
          if JOBU = 'O',  A is overwritten with the first min(m,n)
                          columns of U (the left singular vectors,
                          stored columnwise);
          if JOBVT = 'O', A is overwritten with the first min(m,n)
                          rows of V**H (the right singular vectors,
                          stored rowwise);
          if JOBU .ne. 'O' and JOBVT .ne. 'O', the contents of A
                          are destroyed.
*/

	int m,n,lda,ldu,ldvt,lwork,info;
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	S.resize(1,min(m,n));
	ldu=max(m,1);

	if(jobu == 65)
		U.resize(ldu,m);
	else
		U.resize(ldu,min(m,n));
	

	ldvt=max(m,n);

	VT.resize(ldvt,n);


	var work = new 'ComplexMatrix2D';
	lwork=max(1,6*(max(m,n)));
	work.resize(1,lwork);
	var rwork=new 'NumMatrix2D';

	rwork.resize(1,(5*(min(m,n))));

	var zgesvd = dlfunc(lapack, "zgesvd_", "vppppppppppppppp");	
	if(zgesvd == null || !zgesvd)
		die("Not zgesvd");

	zgesvd(jobu,jobvt,m,n,A,lda,S,U,ldu,VT,ldvt,work,lwork,rwork,info);
	return info;

/*
INFO is INTEGER
          = 0:  successful exit.
          < 0:  if INFO = -i, the i-th argument had an illegal value.
          > 0:  if ZBDSQR did not converge, INFO specifies how many
                superdiagonals of an intermediate bidiagonal form B
                did not converge to zero. See the description of RWORK
                above for details.
*/

}

function max(var a,var b)
{
	return a>b?a:b;
}

function min(var a,var b)
{
        return a>b?b:a;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

