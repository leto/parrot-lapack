// ZGETRF computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.

namespace zgetrf_func{

const int PRINT_DEBUG_STUFF = 0;

/*
	A:	 	COMPLEX*16 array, dimension (LDA,N)
	IPIV: 	INTEGER array, dimension (min(M,N))
*/

function zgetrf_exec(var A,int ipiv)
{
	var pla = loadlib("linalg_group");
	var lapack = loadlib('liblapack.so');
    if (lapack == null || !lapack)
       	die("Cannot find liblapack. Search for the correct paths");

	say("Given Matrix:");
    	say(A);

/*
      A is COMPLEX*16 array, dimension (LDA,N)
          On entry, the M-by-N matrix to be factored.
          On exit, the factors L and U from the factorization
          A = P*L*U; the unit diagonal elements of L are not stored.
 */


	int m,n,lda,ipiv_size,info;
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	ipiv_size=min(m,n);
	
	var zgetrf = dlfunc(lapack, "zgetrf_", "vpppppp");	
	if(zgetrf == null || !zgetrf)
		die("Not ZGETRF");

	zgetrf(m,n,A,lda,ipiv,info);
	return info;

/*
INFO is INTEGER
          = 0:  successful exit
          < 0:  if INFO = -i, the i-th argument had an illegal value
          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization
                has been completed, but the factor U is exactly
                singular, and division by zero will occur if it is used
                to solve a system of equations.
*/

}

function max(var a,var b)
{
	return a>b?a:b;
}

function min(var a,var b)
{
        return a>b?b:a;
}

function ipiv_size(var A)
{
		int m,n,ipiv_size;
        m=A.rows;
        n=A.cols;
        ipiv_size=min(m,n);
        return ipiv_size;
}


function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}
