namespace zgetrf_func{

const int PRINT_DEBUG_STUFF = 0;

function zgetrf_exec(var A,int ipiv)
{
	var pla = loadlib("linalg_group");
	var lapack = loadlib('liblapack.so');
    if (lapack == null || !lapack)
       	die("Cannot find liblapack. Search for the correct paths");

	say("Given Matrix:");
    	say(A);

	int m,n,lda,ipiv_size,info;
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	ipiv_size=min(m,n);
	
	var zgetrf = dlfunc(lapack, "zgetrf_", "vpppppp");	
	if(zgetrf == null || !zgetrf)
		die("Not ZGETRF");

	zgetrf(m,n,A,lda,ipiv,info);
	return info;

}

function max(var a,var b)
{
	return a>b?a:b;
}

function min(var a,var b)
{
        return a>b?b:a;
}

function ipiv_size(var A)
{
		int m,n,ipiv_size;
        m=A.rows;
        n=A.cols;
        ipiv_size=min(m,n);
        return ipiv_size;
}


function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

/*

function main[main](var args)
{

	var pla = loadlib("linalg_group");
	var a = new 'ComplexMatrix2D';
	a.initialize_from_args(3, 3,
                                1.0, 0.0, 0.0,
                                0.0, 1.0, 0.0,
                                0.0, 0.0, 1.0);
	using zgetrf_func.ipiv_size;
        int ipiv_size_v;
	ipiv_size_v=ipiv_size(a);
	say(ipiv_size_v);
	int ipiv[ipiv_size_v];
	int i;
	for(i=0;i<ipiv_size_v;i++)
		ipiv[i]=0;
	say("printing ipiv:\n",ipiv);
    using zgetrf_func.zgetrf_exec;
	int info;
    info=zgetrf_exec(a,ipiv);
    say("printing A");
    say(a);
	say();
	say(ipiv);
}

*/