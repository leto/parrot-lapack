namespace zspsv_func{

const int PRINT_DEBUG_STUFF = 0;

function zspsv_exec(var A,var b,int uplo)
{

	var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack. Search for the correct paths");
        
	int m,n,nrhs,ldb,info;
	m=A.rows;
	n=A.cols;
	
	nrhs=b.cols;
	int ipiv[n];
	int j;
	for(j=0;j<n;++j)
		ipiv[j]=0;
	ldb=max(1,n);
	var	AP=create_ap(A,uplo);

	var zspsv = dlfunc(lapack, "zspsv_", "vpppppppp");
        if(zspsv == null || !zspsv)
                die("Not zspsv");
	
	zspsv(uplo,n,nrhs,AP,ipiv,b,ldb,info);
	
	if(info==0)
		return AP;
}

function create_ap(var A,int uplo)
{
	int m,n;
	m=A.rows;
    n=A.cols;
	var pla = loadlib("linalg_group");
	int ap_size;
    ap_size=int((n*(n+1))/2);
	var ap=new 'ComplexMatrix2D';
	ap.resize(1,ap_size);
	say(ap_size);
	int i,j;
	if(uplo == 85)
	{
		int k=0;
		for(i=0;i<m;++i)
			for(j=i;j<n;++j)
			{
				ap[1,k] = A[i,j];
				++k;
			}
	}
	else if(uplo == 76)
	{
		int k=0;
		for(i=0;i<m;++i)
			for(j=0;j<=i;++j)
				ap[1,k] = A[i,j];
				++k;
	}
	else
	{
		die("invalid input");
	}
	return ap;
}

function max(var a,var b)
{
        return a>b?a:b;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

/*

function main[main](var args)
{
	var pla = loadlib("linalg_group");
	var a = new 'ComplexMatrix2D';
    var b=new 'ComplexMatrix2D';
    var ap=new 'ComplexMatrix2D';
	int uplo;
	uplo=85;
	a.initialize_from_args(3, 3,
                                1.0, 0.0, 0.0,
                                0.0, 1.0, 0.0,
                                0.0, 0.0, 1.0);
	b.initialize_from_args(3, 1,
				1.0,
				1.0,
				1.0);
        using zspsv_func.zspsv_exec;
        ap=zspsv_exec(a,b,uplo);

	say("AP=");
	say(ap);
	say("B=");
	say(b);
}

*/