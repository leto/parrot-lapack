// ZGEQRF computes a QR factorization of a real M-by-N matrix A:
//A = Q * R.

namespace zgeqrf_func{

const int PRINT_DEBUG_STUFF = 0;

/*
A :		COMPLEX*16 array, dimension (LDA,N)
*/

function zgeqrf_exec(var A)
{
	
	var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack. Search for the correct paths");

        say("Given Matrix:");
        say(A);
	
/*
A is COMPLEX*16 array, dimension (LDA,N)
          On entry, the M-by-N matrix A.
          On exit, the elements on and above the diagonal of the array
          contain the min(M,N)-by-N upper trapezoidal matrix R (R is
          upper triangular if m >= n); the elements below the diagonal,
          with the array TAU, represent the orthogonal matrix Q as a
          product of min(m,n) elementary reflectors (see Further
          Details).
*/

	int m,n,lda,lwork,tau_s,work_s,info;
	
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	tau_s=min(m,n);

	var tau=new 'ComplexMatrix2D';
	tau.resize(1,tau_s);

	lwork=max(1,n);
	work_s=max(1,lwork);
	var work=new 'ComplexMatrix2D';
	work.resize(1,work_s);

	
	var zgeqrf = dlfunc(lapack, "zgeqrf_", "vpppppppp");
        if(zgeqrf == null || !zgeqrf)
                die("Not zgeqrf");
	
	zgeqrf(m,n,A,lda,tau,work,lwork,info);

	return info;

/*
 INFO is INTEGER
          = 0:  successful exit
          < 0:  if INFO = -i, the i-th argument had an illegal value
*/

}

function max(var a,var b)
{
        return a>b?a:b;
}

function min(var a,var b)
{
        return a>b?b:a;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

