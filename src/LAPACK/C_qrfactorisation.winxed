namespace zgeqrf_func{

const int PRINT_DEBUG_STUFF = 0;

function zgeqrf_exec(var A)
{
	
	var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack. Search for the correct paths");

        say("Given Matrix:");
        say(A);
	
	int m,n,lda,lwork,tau_s,work_s,info;
	
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	tau_s=min(m,n);

	var tau=new 'ComplexMatrix2D';
	tau.resize(1,tau_s);

	lwork=max(1,n);
	work_s=max(1,lwork);
	var work=new 'ComplexMatrix2D';
	work.resize(1,work_s);

	
	var zgeqrf = dlfunc(lapack, "zgeqrf_", "vpppppppp");
        if(zgeqrf == null || !zgeqrf)
                die("Not zgeqrf");
	
	zgeqrf(m,n,A,lda,tau,work,lwork,info);

	return info;


}

function max(var a,var b)
{
        return a>b?a:b;
}

function min(var a,var b)
{
        return a>b?b:a;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

/*

function main[main](var args)
{

        var pla = loadlib("linalg_group");
        var a = new 'ComplexMatrix2D';
        a.initialize_from_args(3, 3,
                                1.0, 0.0, 0.0,
                                0.0, 1.0, 0.0,
                                0.0, 0.0, 1.0);
        using zgeqrf_func.zgeqrf_exec;
        int info;
        info=zgeqrf_exec(a);
	if(info==0)
		say(a);
}


*/