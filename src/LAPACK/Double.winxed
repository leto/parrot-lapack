namespace dgetrf_func{

const int PRINT_DEBUG_STUFF = 0;

function dgetrf_exec(var A,int ipiv)
{
	var lapack = loadlib('liblapack.so');
    if (lapack == null || !lapack)
        die("Cannot find liblapack. Search for the correct paths");

	int m,n,lda,ipiv_size,info;
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	ipiv_size=min(m,n);
	
// have to call the function DGETRF using dlfunc();
//signature of dlfunc :dlfunc(void * restrict handle, const char * restrict symbol);		
	
	//dlfunc();
	var dgetrf = dlfunc(lapack, "dgetrf_", "vpppppp");	
	if(dgetrf == null || !dgetrf)
		die("Not DGETRF");
	
	
	say(m);
	say(n);
	say(lda);
	say(ipiv_size);


	dgetrf(m,n,A,lda,ipiv,info);
	
	if(info==0)
	{
		say("successful result");
//		say(info);
//		say(A);
//		say(ipiv);
	}
	else if(info<0)
	{
		int info_pos;
		info_pos=-1*info;
		say("the "+info_pos+"-th argument had an illegal value");
	}
	else
	{
		say("A["+info+","+info+"]is exactly zero. The factorization has been completed, but the factor U is exactly singular, and division by zero will occur if it is used to solve a system of equations.");
	}
	say("done");
	return info;

}

function max(var a,var b)
{
	return a>b?a:b;
}

function min(var a,var b)
{
        return a>b?b:a;
}

function ipiv_size(var A)
{
	int m,n,ipiv_size;
        m=A.rows;
        n=A.cols;
        ipiv_size=min(m,n);
        return ipiv_size;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}
