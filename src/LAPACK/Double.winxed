//DGETRF computes an LU factorization of a general M-by-N matrix A using partial pivoting with row interchanges.


namespace dgetrf_func{

const int PRINT_DEBUG_STUFF = 0;

function dgetrf_exec(var A,int ipiv)
{
    	var pla = loadlib("linalg_group");

		var lapack = loadlib('liblapack.so');
    	if (lapack == null || !lapack)
        	die("Cannot find liblapack. Search for the correct paths");

	say("Given Matrix:");
    	say(A);

	int m,n,lda,ipiv_size,info;
	m=A.rows;
	n=A.cols;
	lda=max(1,m);
	ipiv_size=min(m,n);
	
// have to call the function DGETRF using dlfunc();
//signature of dlfunc :dlfunc(void * restrict handle, const char * restrict symbol);		
	
	//dlfunc();
	var dgetrf = dlfunc(lapack, "dgetrf_", "vpppppp");	
	if(dgetrf == null || !dgetrf)
		die("Not DGETRF");
	
	
//	say(m);
//	say(n);
//	say(lda);
//	say(ipiv_size);


	dgetrf(m,n,A,lda,ipiv,info);

/*
info 	  = 0:  successful exit
          < 0:  if INFO = -i, the i-th argument had an illegal value
          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization
                has been completed, but the factor U is exactly
                singular, and division by zero will occur if it is used
                to solve a system of equations.
*/
	
	if(info==0)
	{
		say("successful result");
//		say(info);
//		say(A);
//		say(ipiv);
	}
	else if(info<0)
	{
		int info_pos;
		info_pos=-1*info;
		say("the "+info_pos+"-th argument had an illegal value");
	}
	else
	{
		say("A["+info+","+info+"]is exactly zero. The factorization has been completed, but the factor U is exactly singular, and division by zero will occur if it is used to solve a system of equations.");
	}
	say("done");
	return info;

}

//computes the max value

function max(var a,var b)
{
	return a>b?a:b;
}

//computes the min value

function min(var a,var b)
{
        return a>b?b:a;
}

//helps in determining the size of ipiv

function ipiv_size(var A)
{
	int m,n,ipiv_size;
        m=A.rows;
        n=A.cols;
        ipiv_size=min(m,n);
        return ipiv_size;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}

}

/*

function main[main](var args)
{

	var pla = loadlib("linalg_group");
	var a = new 'NumMatrix2D';
	a.initialize_from_args(3, 3,
                                2.0, -1.0, 1.0,
                                4.0, 1.0, -1.0,
                                1.0, 1.0, 1.0,);
	using dgetrf_func.ipiv_size;
        int ipiv_size_v;
	ipiv_size_v=ipiv_size(a);
	say(ipiv_size_v);
	int ipiv[ipiv_size_v];
	int i;
	for(i=0;i<ipiv_size_v;i++)
		ipiv[i]=0;
	say("printing ipiv:\n",ipiv);
        using dgetrf_func.dgetrf_exec;
	int info;
        info=dgetrf_exec(a,ipiv);
        say("printing A");
        say(a);
	say();
	say(ipiv);
}

*/
