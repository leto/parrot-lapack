namespace multiplication{

const int PRINT_DEBUG_STUFF = 0;

function matmul(var A,var B)
{

		var pla = loadlib("linalg_group");
        var lapack = loadlib('liblapack.so');
        if (lapack == null || !lapack)
                die("Cannot find liblapack. Search for the correct paths");
        
        int transa,transb,m,n,k,lda,ldb,ldc;
        transa=transb=ord('N',0);
        m=A.rows;
        n=B.cols;
        k=A.cols;
        lda=ldc=max(1,m);
        ldb=max(1,n);

        var alpha=new 'NumMatrix2D';
        var beta=new 'NumMatrix2D';
        alpha.resize(m,k);
        int i;
        for(i=0;i<m;++i)
        	alpha[i,i]=1;

        var dgemm = dlfunc(lapack, "dgemm_", "vppppppppppppp");
		if(dgemm == null || !dgemm)
                die("Not DGEMM");

        var C=new 'NumMatrix2D';
        C.resize(ldc,n);
        beta.resize(ldc,n);
        dgemm(transa,transb,m,n,k,alpha,A,lda,B,ldb,beta,C,ldc);
        return C;

}
/*
	int m1,n1,m2,n2;
	m1=A.rows;
	n1=A.cols;
	m2=B.rows;
	n2=B.cols;
	if(n1==m2)
	{
		var pla = loadlib("linalg_group");
		var R=new 'NumMatrix2D';
		R.resize(m1,n2);
		int i,j,k;
		for(i=0;i<m1;++i)
		{
			for(j=0;j<n2;++j)
			{
				for(k=0;k<m2;++k)
				{
					R[i,j]=R[i,j]+(A[i,k]*B[k,j]);
				}
			}
		}
		return R;
	}
	else
	{
		die("Matrix multiplication not possible");
	}
*/	



function max(var a,var b)
{
        return a>b?a:b;
}

function debug(var matrix, string msg, var args [slurpy])
{
    if (PRINT_DEBUG_STUFF) {
        say(sprintf(msg, args));
        say(matrix);
    }
}


}



function main[main](var args)
{
	var pla = loadlib("linalg_group");
        var A=new 'NumMatrix2D';
        var B=new 'NumMatrix2D';
        A.initialize_from_args(3, 3,
                                1.0, 0.0, 0.0,
                                0.0, 1.0, 0.0,
                                0.0, 0.0, 1.0);
		B.initialize_from_args(3, 3,
                                1.0, 0.0, 0.0,
                                0.0, 1.0, 0.0,
                                0.0, 0.0, 1.0);
	var result=new 'NumMatrix2D';
	using multiplication.matmul;
	result=matmul(A,B);
	say("result=");
	say(result);
	return 0;
}
